[1mdiff --git a/streamlit_app.py b/streamlit_app.py[m
[1mindex fde12be..3c108fa 100644[m
[1m--- a/streamlit_app.py[m
[1m+++ b/streamlit_app.py[m
[36m@@ -1,6 +1,271 @@[m
 import streamlit as st[m
[32m+[m[32mfrom auth_functions import register_user, authenticate_user[m
[32m+[m[32mimport fitz  # PyMuPDF[m
[32m+[m[32mimport sqlite3[m
[32m+[m[32mimport spacy[m
[32m+[m[32mfrom unidecode import unidecode[m
[32m+[m[32mimport os[m
[32m+[m[32mimport re[m
[32m+[m[32mfrom spellchecker import SpellChecker[m
[32m+[m[32mfrom PIL import Image[m
[32m+[m[32mimport tempfile[m
 [m
[31m-st.title("üéà My new app")[m
[31m-st.write([m
[31m-    "Let's start building! For help and inspiration, head over to [docs.streamlit.io](https://docs.streamlit.io/)."[m
[31m-)[m
[32m+[m[32m# Initialize SpaCy and spellchecker[m
[32m+[m[32mnlp = spacy.load('fr_core_news_lg')[m
[32m+[m[32mspell = SpellChecker(language='fr')[m
[32m+[m
[32m+[m[32m# Path dictionary for different categories[m
[32m+[m[32mpdf_files = {[m
[32m+[m[32m    "ELECTRICITE": [[m
[32m+[m[32m        ("Contenu Electricit√©", "/workspaces/nsearch_app/.github/assets/pdfs/Electricite")[m
[32m+[m[32m    ],[m
[32m+[m[32m    "FLUIDE": [[m
[32m+[m[32m        ("Contenu Fluide", "/workspaces/nsearch_app/.github/assets/pdfs/Fluide")[m
[32m+[m[32m    ],[m
[32m+[m[32m    "gestion du projet cours": [[m
[32m+[m[32m        ("Contenu Gestion Projet Cours", "/workspaces/nsearch_app/.github/assets/pdfs/gestion du projet cours")[m
[32m+[m[32m    ],[m
[32m+[m[32m    "DOMAINE SPECIFIQUE": [][m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# Initialize SQLite connection and create table if it doesn't exist[m
[32m+[m[32mconn = sqlite3.connect('pdf_search_results.db')[m
[32m+[m[32mc = conn.cursor()[m
[32m+[m[32mc.execute('''CREATE TABLE IF NOT EXISTS pdf_results[m
[32m+[m[32m             (id INTEGER PRIMARY KEY AUTOINCREMENT,[m
[32m+[m[32m              pdf_path TEXT,[m
[32m+[m[32m              page_number INTEGER,[m
[32m+[m[32m              paragraph_text TEXT)''')[m
[32m+[m[32mconn.commit()[m
[32m+[m
[32m+[m[32mdef list_pdfs_in_folder(folder_path):[m
[32m+[m[32m    """List all PDF files in the given folder."""[m
[32m+[m[32m    pdfs = [][m
[32m+[m[32m    if os.path.exists(folder_path):[m
[32m+[m[32m        for file_name in os.listdir(folder_path):[m
[32m+[m[32m            if file_name.lower().endswith(".pdf"):[m
[32m+[m[32m                pdf_path = os.path.join(folder_path, file_name)[m
[32m+[m[32m                pdfs.append(file_name)[m
[32m+[m[32m    return pdfs[m
[32m+[m
[32m+[m[32mdef correct_spelling(text):[m
[32m+[m[32m    corrected_text = [][m
[32m+[m[32m    words = text.split()[m
[32m+[m[32m    for word in words:[m
[32m+[m[32m        corrected_word = spell.correction(word)[m
[32m+[m[32m        corrected_text.append(corrected_word)[m
[32m+[m[32m    return ' '.join(corrected_text)[m
[32m+[m
[32m+[m[32mdef detect_apostrophe_expressions(text):[m
[32m+[m[32m    apostrophe_expressions = re.findall(r'\b\w+\'/.,:;?!&*()_-=+#|{[}]\w+\b', text)[m
[32m+[m[32m    return apostrophe_expressions[m
[32m+[m
[32m+[m[32m# Fonction pour pr√©traiter le texte[m
[32m+[m[32mdef preprocess_text(text):[m
[32m+[m[32m    # Corriger les fautes de frappe courantes[m
[32m+[m[32m    corrected_text = correct_spelling(text)[m
[32m+[m
[32m+[m[32m    # D√©tecter les expressions avec apostrophes[m
[32m+[m[32m    apostrophe_expressions = detect_apostrophe_expressions(corrected_text)[m
[32m+[m
[32m+[m[32m    # Remplacer les apostrophes dans les expressions[m
[32m+[m[32m    for expression in apostrophe_expressions:[m
[32m+[m[32m        if expression in corrected_text:[m
[32m+[m[32m            corrected_text = corrected_text.replace(expression, expression.replace("\'/.,:;?!&*()_-=+#|{[}]", "___"))[m
[32m+[m
[32m+[m[32m    # Normaliser le texte pour supprimer les accents[m
[32m+[m[32m    normalized_text = unidecode(corrected_text)[m
[32m+[m[41m    [m
[32m+[m[32m    # Utiliser SpaCy pour le traitement linguistique avanc√©[m
[32m+[m[32m    doc = nlp(normalized_text)[m
[32m+[m[41m    [m
[32m+[m[32m    # Collecter les lemmes de chaque token (en excluant les tokens d'arr√™t et non alphab√©tiques)[m
[32m+[m[32m    tokens = [][m
[32m+[m[32m    for token in doc:[m
[32m+[m[32m        if token.is_alpha and not token.is_stop:[m
[32m+[m[32m            lemma = token.lemma_.lower()[m
[32m+[m[32m            # Restaurer les tokens uniques avec apostrophes dans le texte final[m
[32m+[m[32m            lemma = lemma.replace("___", "\'/.,:;?!&*()_-=+#|{[}]") if "___" in lemma else lemma[m
[32m+[m[32m            tokens.append(lemma)[m
[32m+[m[41m    [m
[32m+[m[32m    return " ".join(tokens), corrected_text[m[41m   [m
[32m+[m
[32m+[m[32mdef search_and_save_to_db(search_text, corrected_search_text, selected_category):[m
[32m+[m[32m    """Search and save results to the database."""[m
[32m+[m[32m    try:[m
[32m+[m[32m        results = [][m
[32m+[m[32m        for title, folder_path in pdf_files.get(selected_category, []):[m
[32m+[m[32m            if os.path.isdir(folder_path):[m
[32m+[m[32m                for file_name in os.listdir(folder_path):[m
[32m+[m[32m                    if file_name.lower().endswith(".pdf"):[m
[32m+[m[32m                        pdf_path = os.path.join(folder_path, file_name)[m
[32m+[m[32m                        results.extend(search_in_pdf(pdf_path, search_text, corrected_search_text))[m
[32m+[m[32m            elif folder_path.lower().endswith(".pdf"):[m
[32m+[m[32m                results.extend(search_in_pdf(folder_path, search_text, corrected_search_text))[m
[32m+[m[32m        return results[m
[32m+[m[32m    except Exception as e:[m
[32m+[m[32m        return f"Une erreur est survenue : {str(e)}"[m
[32m+[m
[32m+[m[32mdef search_in_pdf(pdf_path, search_text, corrected_search_text):[m
[32m+[m[32m    """Search for text in a PDF file."""[m
[32m+[m[32m    results = [][m
[32m+[m[32m    pdf_document = fitz.open(pdf_path)[m
[32m+[m[32m    for page_num in range(len(pdf_document)):[m
[32m+[m[32m        page = pdf_document.load_page(page_num)[m
[32m+[m[32m        text = page.get_text("text")[m
[32m+[m[32m        fixed_text = " ".join(text.splitlines())[m
[32m+[m[32m        paragraphs = fixed_text.split('. ')[m
[32m+[m[32m        for paragraph in paragraphs:[m
[32m+[m[32m            normalized_paragraph = unidecode(paragraph.lower())[m
[32m+[m[32m            if all(word in normalized_paragraph for word in search_text.lower().split()):[m
[32m+[m[32m                c.execute("INSERT INTO pdf_results (pdf_path, page_number, paragraph_text) VALUES (?, ?, ?)",[m
[32m+[m[32m                          (pdf_path, page_num + 1, paragraph.strip() + '.'))[m
[32m+[m[32m                conn.commit()[m
[32m+[m[32m                results.append((pdf_path, page_num + 1, paragraph.strip() + '.'))[m
[32m+[m[32m    pdf_document.close()[m
[32m+[m[32m    return results[m
[32m+[m
[32m+[m[32mdef extract_page(pdf_path, page_number):[m
[32m+[m[32m    """Extract and return a specific page from the PDF as an image."""[m
[32m+[m[32m    doc = fitz.open(pdf_path)[m
[32m+[m[32m    page = doc.load_page(page_number - 1)  # Page numbers are 0-based in PyMuPDF[m
[32m+[m[32m    pix = page.get_pixmap()[m
[32m+[m[32m    img_data = pix.tobytes("png")[m
[32m+[m[32m    return img_data[m
[32m+[m
[32m+[m[32mdef show_login_form():[m
[32m+[m[32m    st.title("Connexion")[m
[32m+[m[32m    username = st.text_input("Nom d'utilisateur")[m
[32m+[m[32m    password = st.text_input("Mot de passe", type="password")[m
[32m+[m
[32m+[m[32m    if st.button("Se connecter"):[m
[32m+[m[32m        if authenticate_user(username, password):[m
[32m+[m[32m            st.session_state.user = username[m
[32m+[m[32m            st.session_state.show_main_content = True  # Set flag to show main content[m
[32m+[m[32m            st.session_state.show_login = False[m
[32m+[m[32m        else:[m
[32m+[m[32m            st.error("Nom d'utilisateur ou mot de passe incorrect.")[m
[32m+[m
[32m+[m[32mdef show_registration_form():[m
[32m+[m[32m    st.title("Inscription")[m
[32m+[m[32m    username = st.text_input("Nom d'utilisateur")[m
[32m+[m[32m    password = st.text_input("Mot de passe", type="password")[m
[32m+[m[32m    email = st.text_input("Email")[m
[32m+[m[32m    full_name = st.text_input("Nom complet")[m
[32m+[m
[32m+[m[32m    if st.button("S'inscrire"):[m
[32m+[m[32m        if register_user(username, password, email, full_name):[m
[32m+[m[32m            st.success("Inscription r√©ussie !")[m
[32m+[m[32m            st.session_state.show_login = True[m
[32m+[m[32m            st.session_state.show_main_content = False[m
[32m+[m
[32m+[m[32mdef show_main_content():[m
[32m+[m[32m    # Affichage du logo[m
[32m+[m[32m    image_path = "/workspaces/nsearch_app/.github/assets/NSearch.jpeg"[m
[32m+[m[32m    if os.path.exists(image_path):[m
[32m+[m[32m        image = Image.open(image_path)[m
[32m+[m[32m        image = image.resize((100, 75), resample=Image.LANCZOS)[m
[32m+[m[32m        st.image(image, width=100)[m
[32m+[m[32m    else:[m
[32m+[m[32m        st.error(f"Image not found at path: {image_path}")[m
[32m+[m
[32m+[m[32m    # Salutation text[m
[32m+[m[32m    salutation_text = ("Bienvenue sur le moteur de recherche sur les normes et r√©glementations techniques.\n"[m
[32m+[m[32m                       "S'il vous pla√Æt s√©lectionnez un des dossiers ci-dessous.")[m
[32m+[m[32m    st.write(salutation_text)[m
[32m+[m
[32m+[m[32m    # Create a selectbox for categories based on the pdf_files dictionary[m
[32m+[m[32m    categories = list(pdf_files.keys())[m
[32m+[m[32m    selected_category = st.selectbox("S√©lectionnez un domaine :", [""] + categories)[m
[32m+[m
[32m+[m[32m    if selected_category:[m
[32m+[m[32m        st.write(f"Vous avez s√©lectionn√© : {selected_category}")[m
[32m+[m
[32m+[m[32m        if selected_category == "DOMAINE SPECIFIQUE":[m
[32m+[m[32m            # Add PDFs to "DOMAINE SPECIFIQUE"[m
[32m+[m[32m            uploaded_files = st.file_uploader("Ajouter des fichiers PDF", type="pdf", accept_multiple_files=True)[m
[32m+[m[32m            if uploaded_files:[m
[32m+[m[32m                for uploaded_file in uploaded_files:[m
[32m+[m[32m                    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:[m
[32m+[m[32m                        tmp_file.write(uploaded_file.read())[m
[32m+[m[32m                        tmp_path = tmp_file.name[m
[32m+[m[32m                        title = os.path.basename(tmp_path)[m
[32m+[m[32m                        pdf_files["DOMAINE SPECIFIQUE"].append((title, tmp_path))[m
[32m+[m
[32m+[m[32m        # List the PDF files in the selected category's folder[m
[32m+[m[32m        folder_path = [folder_path for title, folder_path in pdf_files.get(selected_category, []) if os.path.isdir(folder_path)][m
[32m+[m[32m        if folder_path:[m
[32m+[m[32m            pdf_files_list = list_pdfs_in_folder(folder_path[0])[m
[32m+[m[32m            if pdf_files_list:[m
[32m+[m[32m                st.write("Documents disponibles :")[m
[32m+[m[32m                for pdf_name in pdf_files_list:[m
[32m+[m[32m                    st.write(f"- {pdf_name}")[m
[32m+[m
[32m+[m[32m        # Search form[m
[32m+[m[32m        st.write("Rechercher dans les documents PDF")[m
[32m+[m[32m        search_text = st.text_input("Texte √† rechercher :")[m
[32m+[m[32m        if st.button("Rechercher"):[m
[32m+[m[32m            if search_text:[m
[32m+[m[32m                # Pr√©traiter le texte et obtenir la version corrig√©e[m
[32m+[m[32m                corrected_search_text, _ = preprocess_text(search_text)[m
[32m+[m[41m                [m
[32m+[m[32m                # Recherche en utilisant le texte original[m
[32m+[m[32m                with st.spinner("Recherche en cours..."):[m
[32m+[m[32m                    results = search_and_save_to_db(search_text, corrected_search_text, selected_category)[m
[32m+[m[41m                    [m
[32m+[m[32m                    if results:[m
[32m+[m[32m                        st.write(f"R√©sultats trouv√©s : {len(results)}")[m
[32m+[m[32m                        for i, (pdf_path, page_num, paragraph) in enumerate(results, start=1):[m
[32m+[m[32m                            file_name = os.path.basename(pdf_path)[m
[32m+[m[32m                            link_text = f"Fichier : {file_name}, Page : {page_num}"[m
[32m+[m[32m                            with st.expander(link_text):[m
[32m+[m[32m                                st.write(f"**{link_text}**")[m
[32m+[m[32m                                st.write(f"{paragraph}")[m
[32m+[m[32m                                img_data = extract_page(pdf_path, page_num)[m
[32m+[m[32m                                st.image(img_data, caption=f"Page {page_num} de {file_name}")[m
[32m+[m[32m                                with open(pdf_path, "rb") as pdf_file:[m
[32m+[m[32m                                    st.download_button([m
[32m+[m[32m                                        label="T√©l√©charger le PDF complet",[m
[32m+[m[32m                                        data=pdf_file,[m
[32m+[m[32m                                        file_name=file_name,[m
[32m+[m[32m                                        key=f"download_button_{i}"[m
[32m+[m[32m                                    )[m
[32m+[m[32m                    else:[m
[32m+[m[32m                        # Recherche avec le texte corrig√© uniquement si aucun r√©sultat n'est trouv√© avec le texte original[m
[32m+[m[32m                        corrected_results = search_and_save_to_db(corrected_search_text, corrected_search_text, selected_category)[m
[32m+[m[32m                        if corrected_results:[m
[32m+[m[32m                            st.write(f"R√©sultats trouv√©s pour le mot corrig√© '{corrected_search_text}' : {len(corrected_results)}")[m
[32m+[m[32m                            for i, (pdf_path, page_num, paragraph) in enumerate(corrected_results, start=1):[m
[32m+[m[32m                                file_name = os.path.basename(pdf_path)[m
[32m+[m[32m                                link_text = f"Fichier : {file_name}, Page : {page_num}"[m
[32m+[m[32m                                with st.expander(link_text):[m
[32m+[m[32m                                    st.write(f"**{link_text}**")[m
[32m+[m[32m                                    st.write(f"{paragraph}")[m
[32m+[m[32m                                    img_data = extract_page(pdf_path, page_num)[m
[32m+[m[32m                                    st.image(img_data, caption=f"Page {page_num} de {file_name}")[m
[32m+[m[32m                                    with open(pdf_path, "rb") as pdf_file:[m
[32m+[m[32m                                        st.download_button([m
[32m+[m[32m                                            label="T√©l√©charger le PDF complet",[m
[32m+[m[32m                                            data=pdf_file,[m
[32m+[m[32m                                            file_name=file_name,[m
[32m+[m[32m                                            key=f"download_button_{i}"[m
[32m+[m[32m                                        )[m
[32m+[m[32m                        else:[m
[32m+[m[32m                            st.write("Aucun r√©sultat trouv√©.")[m
[32m+[m
[32m+[m[32mdef main():[m
[32m+[m[32m    # V√©rifier l'√©tat de connexion[m
[32m+[m[32m    if 'user' in st.session_state and st.session_state.get('show_main_content', False):[m
[32m+[m[32m        # Afficher le contenu principal[m
[32m+[m[32m        show_main_content()[m
[32m+[m[32m    else:[m
[32m+[m[32m        # Afficher le formulaire de connexion et d'inscription[m
[32m+[m[32m        menu = st.sidebar.selectbox("Menu", ["Connexion", "Inscription"])[m
[32m+[m
[32m+[m[32m        if menu == "Inscription":[m
[32m+[m[32m            show_registration_form()[m
[32m+[m[32m        elif menu == "Connexion":[m
[32m+[m[32m            show_login_form()[m
[32m+[m
[32m+[m[32mif __name__ == "__main__":[m
[32m+[m[32m    main()[m
